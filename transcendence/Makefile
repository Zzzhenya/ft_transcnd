# Transcendence Microservices Makefile
# Combines development and production workflows

.PHONY: help all start start-monitoring stop clean fclean logs test health

# Default target
all: start-monitoring

#=============================================================================
# Help and Information
#=============================================================================
help:
	@echo "üöÄ Transcendence Microservices Commands"
	@echo ""
	@echo "üì¶ Basic Operations:"
	@echo "  make all              - Start all services with monitoring (default)"
	@echo "  make start            - Start basic services only (no ELK stack)"
	@echo "  make start-monitoring - Start all services with ELK monitoring"
	@echo "  make stop             - Stop all services (keep data)"
	@echo "  make clean            - Stop and remove containers (keep volumes)"
	@echo "  make fclean           - Stop and remove everything (‚ö†Ô∏è  deletes all data!)"
	@echo ""
	@echo "üìä Monitoring & Logs:"
	@echo "  make logs             - Follow all container logs"
	@echo "  make logs-elk         - Follow ELK stack logs only"
	@echo "  make logs-services    - Follow application services logs only"
	@echo "  make kibana           - Open Kibana in browser"
	@echo ""
	@echo "üß™ Testing & Health:"
	@echo "  make test             - Send test log to Logstash"
	@echo "  make health           - Check all services health"
	@echo "  make status           - Show container status"
	@echo ""
	@echo "üîÑ Development:"
	@echo "  make up               - Build and start (alias for start-monitoring)"
	@echo "  make down             - Interactive cleanup with confirmation"
	@echo "  make restart          - Stop and start all services"

#=============================================================================
# Main Service Commands
#=============================================================================
start:
	@echo "üöÄ Starting basic services..."
	docker compose up -d
	@echo ""
	@echo "‚úÖ Basic services started!"
	@echo "  Frontend: http://localhost:3004"
	@echo "  Gateway:  http://localhost:3000"
	@echo ""
	@echo "üí° For monitoring, use: make start-monitoring"

start-monitoring:
	@echo "üöÄ Starting all services with ELK monitoring..."
	docker compose --profile monitoring up --build -d
	@echo ""
	@echo "‚è≥ Waiting for services to initialize..."
	@sleep 3
	@echo ""
	@echo "üéâ All services started with monitoring!"
	@echo "‚è≥ Wait ~60 seconds for Elasticsearch & Kibana to fully initialize"
	@echo ""
	@echo "üîó Access Points:"
	@echo "  Frontend:     http://localhost:3004"
	@echo "  Gateway:      http://localhost:3000"
	@echo "  Kibana:       http://localhost:5601"
	@echo "  Logstash:     http://localhost:5044 (external testing)"
	@echo ""
	@echo "üìä Running health checker..."
	@sleep 2
	@docker compose -f docker-compose.yml run --rm health-checker || true
	@echo ""
	@echo "üìà Container count:"
	@docker ps | wc -l

# Aliases for different workflows
up: start-monitoring
compose: start-monitoring

#=============================================================================
# Stop and Cleanup Commands
#=============================================================================
stop:
	@echo "üõë Stopping all services..."
	@docker ps | wc -l
	docker compose down
	@echo "‚úÖ All services stopped"
	@docker ps | wc -l

clean: stop
	@echo "üßπ Cleaning containers (keeping volumes)..."
	docker compose down
	@echo "‚úÖ Containers cleaned"

fclean: stop
	@echo "‚ö†Ô∏è  Full cleanup will remove ALL DATA including logs and databases!"
	@read -p "Are you sure? [y/N] " ans && ans=$${ans:-N} ;\
	if [ $${ans} = y ] || [ $${ans} = Y ]; then\
		printf "üóëÔ∏è  Performing full cleanup...\n" ;\
		docker compose down -v ;\
		docker volume prune -af ;\
		docker volume rm transcendence_shared-data transcendence_elasticsearch-data 2>/dev/null || true ;\
		docker system prune -a -f ;\
		echo "‚úÖ Full cleanup completed!" ;\
	else\
		printf "‚ùå Cleanup aborted\n" ;\
	fi

down: fclean

restart: stop start-monitoring

#=============================================================================
# Logging and Monitoring
#=============================================================================
logs:
	@echo "üìú Following all logs (Ctrl+C to stop)..."
	docker compose logs -f

logs-elk:
	@echo "üìä Following ELK stack logs (Ctrl+C to stop)..."
	docker compose logs -f elasticsearch logstash kibana kibana-setup

logs-services:
	@echo "üîß Following application services logs (Ctrl+C to stop)..."
	docker compose logs -f gateway user-service game-service tournament-service log-service frontend

kibana:
	@echo "üîç Opening Kibana in browser..."
	@open http://localhost:5601 2>/dev/null || xdg-open http://localhost:5601 2>/dev/null || echo "üåê Open: http://localhost:5601"

status:
	@echo "üìä Container Status:"
	docker compose ps

#=============================================================================
# Testing and Health Checks
#=============================================================================
test:
	@echo "üß™ Sending test log to Logstash..."
	@curl -X POST http://localhost:5044 \
		-H "Content-Type: application/json" \
		-d '{ \
			"level": "info", \
			"message": "Test log from Makefile at '$$(date)'", \
			"service": "makefile-test", \
			"metadata": { \
				"source": "makefile", \
				"timestamp": "'$$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" \
			} \
		}' \
		-w "\nHTTP Status: %{http_code}\n" \
		&& echo "‚úÖ Test log sent successfully!" \
		|| echo "‚ùå Failed to send test log"

test-log-service:
	@echo "üß™ Testing log-service endpoint..."
	@curl -X POST http://localhost:3003/api/logs \
		-H "Content-Type: application/json" \
		-d '{ \
			"level": "info", \
			"message": "Test via log-service", \
			"service": "makefile-test" \
		}' \
		-w "\nHTTP Status: %{http_code}\n" \
		&& echo "‚úÖ Log-service test completed!" \
		|| echo "‚ùå Log-service not accessible (internal only)"

health:
	@echo "ü©∫ Checking service health..."
	@echo ""
	@echo "üîç Gateway Health:"
	@curl -s http://localhost:3000/health -w " (Status: %{http_code})\n" || echo "‚ùå Gateway not responding"
	@echo ""
	@echo "üîç Elasticsearch Health:"
	@curl -s http://localhost:9200/_cluster/health?pretty || echo "‚ùå Elasticsearch not accessible (internal only)"
	@echo ""
	@echo "üîç Kibana Status:"
	@curl -s http://localhost:5601/api/status -w " (Status: %{http_code})\n" || echo "‚ùå Kibana not responding"
	@echo ""
	@echo "üîç Logstash Health:"
	@curl -s http://localhost:5044 -X GET -w " (Status: %{http_code})\n" || echo "‚ùå Logstash not responding"

#=============================================================================
# Development Helpers
#=============================================================================
dev-setup:
	@echo "üõ†Ô∏è  Setting up development environment..."
	@chmod +x monitoring/kibana/*.sh
	@echo "‚úÖ Scripts made executable"

rebuild:
	@echo "üîÑ Rebuilding all containers..."
	docker compose --profile monitoring build --no-cache
	@echo "‚úÖ Rebuild completed"

reset-logs:
	@echo "üóëÔ∏è  Resetting Elasticsearch logs..."
	@read -p "This will delete all stored logs. Continue? [y/N] " ans && ans=$${ans:-N} ;\
	if [ $${ans} = y ] || [ $${ans} = Y ]; then\
		docker compose stop elasticsearch ;\
		docker volume rm transcendence_elasticsearch-data 2>/dev/null || true ;\
		docker compose --profile monitoring up -d ;\
		echo "‚úÖ Logs reset completed!" ;\
	else\
		printf "‚ùå Log reset aborted\n" ;\
	fi

#=============================================================================
# Shortcuts and Aliases
#=============================================================================
# Quick shortcuts
s: start
sm: start-monitoring
st: stop
l: logs
t: test
h: health
k: kibana