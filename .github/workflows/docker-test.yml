name: Docker Build Validation

on:
  push:
    branches:
      - user-service
      - microservices-refactor
      - api-gateway-basics
      - main
      - health-check-via-compose
      - integration-gateway-pong-front
      - log-service

  pull_request:
    branches:
      - user-service
      - microservices-refactor
      - main

jobs:
  validate-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml syntax
        run: |
          cd transcendence
          docker compose -f docker-compose.yml config > /dev/null
          echo "✅ docker-compose.yml syntax is valid"

      - name: Validate docker-compose.dev.yml syntax
        run: |
          cd transcendence
          if [ -f docker-compose.dev.yml ]; then
            docker compose -f docker-compose.dev.yml config > /dev/null
            echo "✅ docker-compose.dev.yml syntax is valid"
          else
            echo "ℹ️ docker-compose.dev.yml not found, skipping"
          fi

  build-services:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    strategy:
      matrix:
        service:
          - gateway
          - user-service
          - game-service
          - log-service
          - tournament-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify service files exist
        run: |
          echo "Checking ${{ matrix.service }} files..."
          ls -la transcendence/services/${{ matrix.service }}/
          
          if [ ! -f transcendence/services/${{ matrix.service }}/Dockerfile ]; then
            echo "❌ Dockerfile missing for ${{ matrix.service }}"
            exit 1
          fi
          
          if [ ! -f transcendence/services/${{ matrix.service }}/package.json ]; then
            echo "❌ package.json missing for ${{ matrix.service }}"
            exit 1
          fi
          
          # Check for main source file (either .js or .ts)
          if [ -f transcendence/services/${{ matrix.service }}/src/index.js ]; then
            echo "✅ src/index.js found for ${{ matrix.service }}"
          elif [ -f transcendence/services/${{ matrix.service }}/src/index.ts ]; then
            echo "✅ src/index.ts found for ${{ matrix.service }}"
          else
            echo "❌ Neither src/index.js nor src/index.ts found for ${{ matrix.service }}"
            exit 1
          fi
          
          echo "✅ All required files exist for ${{ matrix.service }}"

      - name: Build ${{ matrix.service }} Docker image
        run: |
          cd transcendence
          docker build -t ${{ matrix.service }}:test ./services/${{ matrix.service }}
          echo "✅ ${{ matrix.service }} built successfully"

      - name: Test ${{ matrix.service }} image basic functionality
        run: |
          # Test that the image contains Node.js
          docker run --rm ${{ matrix.service }}:test node --version
          
          # Test that the image has the expected structure
          docker run --rm ${{ matrix.service }}:test ls -la /app
          
          echo "✅ ${{ matrix.service }} image basic tests passed"

  build-frontend:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify frontend files exist
        run: |
          echo "Checking frontend files..."
          ls -la transcendence/frontend/
          
          if [ ! -f transcendence/frontend/Dockerfile ]; then
            echo "❌ Frontend Dockerfile missing"
            exit 1
          fi
          
          if [ ! -f transcendence/frontend/package.json ]; then
            echo "❌ Frontend package.json missing"
            exit 1
          fi
          
          echo "✅ Frontend required files exist"

      - name: Build frontend Docker image
        run: |
          cd transcendence
          docker build -t frontend:test ./frontend
          echo "✅ Frontend built successfully"

  test-shared-resources:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify shared directory structure
        run: |
          echo "Checking shared directory structure..."
          
          # Check if shared directories exist
          for dir in config database types utils; do
            if [ -d "transcendence/shared/$dir" ]; then
              echo "✅ transcendence/shared/$dir exists"
              ls -la transcendence/shared/$dir/
            else
              echo "⚠️ transcendence/shared/$dir missing"
            fi
          done

      - name: Verify monitoring configuration
        run: |
          echo "Checking monitoring directory..."
          
          if [ -d "transcendence/monitoring" ]; then
            echo "✅ Monitoring directory exists"
            ls -la transcendence/monitoring/
            
            # Check for monitoring configurations
            for subdir in elk grafana prometheus; do
              if [ -d "transcendence/monitoring/$subdir" ]; then
                echo "✅ transcendence/monitoring/$subdir exists"
              else
                echo "⚠️ transcendence/monitoring/$subdir missing"
              fi
            done
          else
            echo "⚠️ Monitoring directory missing"
          fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-services, build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cd transcendence
          cat > .env << EOF
          NODE_ENV=test
          DATABASE_URL=sqlite:/app/shared/transcendence.db
          JWT_SECRET=test-secret-key-for-ci-only-not-secure
          USER_SERVICE_URL=http://user-service:3001
          GAME_SERVICE_URL=http://game-service:3002
          LOG_SERVICE_URL=http://log-service:3003
          VITE_API_URL=http://localhost:3000
          EOF
          echo "✅ Test .env file created"

      - name: Start all services
        run: |
          cd transcendence
          echo "Starting all services..."
          docker compose up -d --build
          echo "⏳ Waiting for services to initialize..."
          sleep 45

      - name: Check container status
        run: |
          cd transcendence
          echo "=== Container Status ==="
          docker compose ps
          
          echo "=== Service Health Checks ==="

      - name: Test Gateway service
        run: |
          echo "Testing Gateway..."
          for i in {1..10}; do
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Gateway is responding"
              break
            else
              echo "⏳ Gateway not ready, attempt $i/10"
              sleep 10
              if [ $i -eq 10 ]; then
                echo "❌ Gateway failed to respond after 100 seconds"
                cd transcendence
                echo "=== Gateway Logs ==="
                docker compose logs gateway | tail -50
                exit 1
              fi
            fi
          done

      - name: Test User Service
        run: |
          echo "Testing User Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/user-service/health; then
              echo "✅ User Service is responding via Gateway"
              break
            else
              echo "⏳ User Service not ready via Gateway, attempt $i/5"
              sleep 10
              if [ $i -eq 5 ]; then
                echo "❌ User Service failed to respond via Gateway"
                exit 1
              fi
            fi
          done

      - name: Test Game Service
        run: |
          echo "Testing Game Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/game-service/health; then
              echo "✅ Game Service is responding via Gateway"
              break
            else
              echo "⏳ Game Service not ready via Gateway, attempt $i/5"
              sleep 10
              if [ $i -eq 5 ]; then
                echo "❌ Game Service failed to respond via Gateway"
                exit 1
              fi
            fi
          done

      - name: Test Log Service
        run: |
          echo "Testing Log Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/log-service/health; then
              echo "✅ Log Service is responding via Gateway"
              break
            else
              echo "⏳ Log Service not ready via Gateway, attempt $i/5"
              sleep 10
              if [ $i -eq 5 ]; then
                echo "❌ Log Service failed to respond via Gateway"
                exit 1
              fi
            fi
          done

      - name: Test Tournament Service
        run: |
          echo "Testing Tournament Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/tournament-service/health; then
              echo "✅ Tournament Service is responding via Gateway"
              break
            else
              echo "⏳ Tournament Service not ready via Gateway, attempt $i/5"
              sleep 10
              if [ $i -eq 5 ]; then
                echo "⚠️ Tournament Service route not configured in Gateway yet"
                echo "ℹ️  This is expected if tournament routes are not implemented"
                # Don't exit with error since this is expected
              fi
            fi
          done

      - name: Test Other Unexposed Services
        run: |
          echo "Test Other Unexposed Services.."
          cd transcendence
          pwd
          docker compose -f docker-compose.yml run --rm health-checker
          RES=$?
          if [ $RES -eq 0 ] ; then
            echo "✅ Other Unexposed Services are responding"
          else
            echo "⏳ Other Unexposed Services are not ready"
            exit 1
          fi

      - name: Test inter-service communication
        run: |
          cd transcendence
          echo "Testing service-to-service communication..."

          # Test that gateway can reach other services from inside its container
          echo "Testing Gateway → User Service communication..."
          if docker compose exec -T gateway curl -f -s http://user-service:3001/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ User Service communication works"
          else
            echo "❌ Gateway cannot reach User Service"
            exit 1
          fi
          
          echo "Testing Gateway → Game Service communication..."
          if docker compose exec -T gateway curl -f -s http://game-service:3002/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ Game Service communication works"
          else
            echo "❌ Gateway cannot reach Game Service"
            exit 1
          fi
          
          echo "Testing Gateway → Log Service communication..."
          if docker compose exec -T gateway curl -f -s http://log-service:3003/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ Log Service communication works"
          else
            echo "❌ Gateway cannot reach Log Service"
            exit 1
          fi
          
          echo "Testing Gateway → Tournament Service communication..."
          if docker compose exec -T gateway curl -f -s http://tournament-service:3005/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ Tournament Service communication works"
          else
            echo "⚠️ Gateway cannot reach Tournament Service (container-to-container communication)"
            echo "ℹ️  This might be expected if tournament service is not fully configured"
            # Don't exit with error - this is more informational
          fi

          # Test external access to gateway routes
          echo "Testing external access to gateway health routes..."
          
          if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Gateway health endpoint accessible"
          else
            echo "❌ Gateway health endpoint not accessible"
            exit 1
          fi
          
          if curl -f -s http://localhost:3000/user-service/health > /dev/null 2>&1; then
            echo "✅ User Service via Gateway accessible"
          else
            echo "❌ User Service via Gateway not accessible"
            exit 1
          fi
          
          if curl -f -s http://localhost:3000/tournament-service/health > /dev/null 2>&1; then
            echo "✅ Tournament Service via Gateway accessible"
          else
            echo "⚠️ Tournament Service via Gateway not accessible"
            echo "ℹ️  This is expected if tournament service routes are not implemented in gateway"
            # Don't exit with error since this is expected
          fi

      - name: Test database volume mount
        run: |
          cd transcendence
          echo "Testing database volume..."
          
          # Check if database volume is mounted correctly
          docker compose exec -T user-service ls -la /app/shared/ || {
            echo "❌ Shared volume not mounted in user-service"
            exit 1
          }
          echo "✅ Database volume is accessible"

      - name: Show service logs on failure
        if: failure()
        run: |
          cd transcendence
          echo "=== Showing service logs for debugging ==="
          echo "=== Gateway Logs ==="
          docker compose logs gateway | tail -50
          echo "=== User Service Logs ==="
          docker compose logs user-service | tail -50
          echo "=== Game Service Logs ==="
          docker compose logs game-service | tail -50
          echo "=== Log Service Logs ==="
          docker compose logs log-service | tail -50
          echo "=== Frontend Logs ==="
          docker compose logs frontend | tail -50

      - name: Cleanup
        if: always()
        run: |
          cd transcendence
          docker compose down -v
          docker system prune -f

  test-development-mode:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test development docker-compose
        run: |
          cd transcendence
          
          if [ -f docker-compose.dev.yml ]; then
            echo "Testing development configuration..."
            
            # Create test .env
            cat > .env << EOF
          NODE_ENV=development
          JWT_SECRET=dev-secret
          DATABASE_URL=sqlite:/app/shared/transcendence.db
          EOF
            
            # Test development build
            docker compose -f docker-compose.yml -f docker-compose.dev.yml build
            echo "✅ Development configuration builds successfully"
          else
            echo "ℹ️ docker-compose.dev.yml not found, skipping development test"
          fi

  final-status:
    runs-on: ubuntu-latest
    needs: [validate-docker-compose, build-services, build-frontend, test-shared-resources, integration-test, test-development-mode]
    if: always()
    
    steps:
      - name: Report final status
        run: |
          echo "=== CI Pipeline Results ==="
          
          if [ "${{ needs.validate-docker-compose.result }}" = "success" ]; then
            echo "✅ Docker Compose validation passed"
          else
            echo "❌ Docker Compose validation failed"
          fi
          
          if [ "${{ needs.build-services.result }}" = "success" ]; then
            echo "✅ All services built successfully"
          else
            echo "❌ Service builds failed"
          fi
          
          if [ "${{ needs.build-frontend.result }}" = "success" ]; then
            echo "✅ Frontend built successfully"
          else
            echo "❌ Frontend build failed"
          fi
          
          if [ "${{ needs.integration-test.result }}" = "success" ]; then
            echo "✅ Integration tests passed"
          else
            echo "❌ Integration tests failed"
          fi
          
          # Check if all critical jobs passed
          if [ "${{ needs.validate-docker-compose.result }}" != "success" ] || \
             [ "${{ needs.build-services.result }}" != "success" ] || \
             [ "${{ needs.build-frontend.result }}" != "success" ] || \
             [ "${{ needs.integration-test.result }}" != "success" ]; then
            echo "❌ Pipeline failed - please fix issues before merging"
            exit 1
          fi
          
          echo "🎉 All tests passed! Docker setup is working correctly."
