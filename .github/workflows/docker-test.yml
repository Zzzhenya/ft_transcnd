name: Docker Build Validation

on:
  push:
    branches:
      - user-service
      - microservices-refactor
      - api-gateway-basics
      - main
      - health-check-via-compose
      - integration-gateway-pong-front
      - log-service
      - before-test-db

  pull_request:
    branches:
      - user-service
      - microservices-refactor
      - main

jobs:
  validate-docker-compose:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yml syntax
        run: |
          cd transcendence
          docker compose -f docker-compose.yml config > /dev/null
          echo "✅ docker-compose.yml syntax is valid"

      - name: Validate docker-compose.dev.yml syntax
        run: |
          cd transcendence
          if [ -f docker-compose.dev.yml ]; then
            docker compose -f docker-compose.dev.yml config > /dev/null
            echo "✅ docker-compose.dev.yml syntax is valid"
          else
            echo "ℹ️ docker-compose.dev.yml not found, skipping"
          fi

  build-services:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    strategy:
      matrix:
        service:
          - gateway
          - user-service
          - game-service
          - log-service
          - tournament-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify service files exist
        run: |
          echo "Checking ${{ matrix.service }} files..."
          ls -la transcendence/services/${{ matrix.service }}/
          
          if [ ! -f transcendence/services/${{ matrix.service }}/Dockerfile ]; then
            echo "❌ Dockerfile missing for ${{ matrix.service }}"
            exit 1
          fi
          
          if [ ! -f transcendence/services/${{ matrix.service }}/package.json ]; then
            echo "❌ package.json missing for ${{ matrix.service }}"
            exit 1
          fi
          
          # Check for main source file (either .js or .ts)
          if [ -f transcendence/services/${{ matrix.service }}/src/index.js ]; then
            echo "✅ src/index.js found for ${{ matrix.service }}"
          elif [ -f transcendence/services/${{ matrix.service }}/src/index.ts ]; then
            echo "✅ src/index.ts found for ${{ matrix.service }}"
          else
            echo "❌ Neither src/index.js nor src/index.ts found for ${{ matrix.service }}"
            exit 1
          fi
          
          echo "✅ All required files exist for ${{ matrix.service }}"

      - name: Build ${{ matrix.service }} Docker image
        run: |
          cd transcendence
          docker build -t ${{ matrix.service }}:test ./services/${{ matrix.service }}
          echo "✅ ${{ matrix.service }} built successfully"

      - name: Test ${{ matrix.service }} image basic functionality
        run: |
          # Test that the image contains Node.js
          docker run --rm ${{ matrix.service }}:test node --version
          
          # Test that the image has the expected structure
          docker run --rm ${{ matrix.service }}:test ls -la /app
          
          echo "✅ ${{ matrix.service }} image basic tests passed"

  build-frontend:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify frontend files exist
        run: |
          echo "Checking frontend files..."
          ls -la transcendence/frontend/
          
          if [ ! -f transcendence/frontend/Dockerfile ]; then
            echo "❌ Frontend Dockerfile missing"
            exit 1
          fi
          
          if [ ! -f transcendence/frontend/package.json ]; then
            echo "❌ Frontend package.json missing"
            exit 1
          fi
          
          echo "✅ Frontend required files exist"

      - name: Build frontend Docker image
        run: |
          cd transcendence
          docker build -t frontend:test ./frontend
          echo "✅ Frontend built successfully"

  test-shared-resources:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify shared directory structure
        run: |
          echo "Checking shared directory structure..."
          
          # Check if shared directories exist
          for dir in config database types utils; do
            if [ -d "transcendence/shared/$dir" ]; then
              echo "✅ transcendence/shared/$dir exists"
              ls -la transcendence/shared/$dir/
            else
              echo "⚠️ transcendence/shared/$dir missing"
            fi
          done

      - name: Verify monitoring configuration
        run: |
          echo "Checking monitoring directory..."
          
          if [ -d "transcendence/monitoring" ]; then
            echo "✅ Monitoring directory exists"
            ls -la transcendence/monitoring/
            
            # Check for monitoring configurations
            for subdir in kibana logstash; do
              if [ -d "transcendence/monitoring/$subdir" ]; then
                echo "✅ transcendence/monitoring/$subdir exists"
              else
                echo "⚠️ transcendence/monitoring/$subdir missing"
              fi
            done
          else
            echo "⚠️ Monitoring directory missing"
          fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-services, build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cd transcendence
          cat > .env << EOF
          NODE_ENV=test
          DATABASE_URL=sqlite:/app/shared/transcendence.db
          JWT_SECRET=test-secret-key-for-ci-only-not-secure
          USER_SERVICE_URL=http://user-service:3001
          GAME_SERVICE_URL=http://game-service:3002
          LOG_SERVICE_URL=http://log-service:3003
          VITE_API_URL=http://localhost:3000
          EOF
          echo "✅ Test .env file created"

      - name: Start all services
        run: |
          cd transcendence
          echo "Starting all services..."
          docker compose up -d --build
          echo "⏳ Waiting for services to initialize..."
          sleep 60

      - name: Check container status
        run: |
          cd transcendence
          echo "=== Container Status ==="
          docker compose ps

      - name: Test Gateway service
        run: |
          echo "Testing Gateway..."
          for i in {1..12}; do
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "✅ Gateway is responding"
              curl -s http://localhost:3000/health
              break
            else
              echo "⏳ Gateway not ready, attempt $i/12"
              sleep 10
              if [ $i -eq 12 ]; then
                echo "❌ Gateway failed to respond after 120 seconds"
                cd transcendence
                echo "=== Gateway Logs ==="
                docker compose logs gateway | tail -100
                exit 1
              fi
            fi
          done

      - name: Test User Service via Gateway
        run: |
          echo "Testing User Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/user-service/health; then
              echo "✅ User Service is responding via Gateway"
              break
            else
              echo "⏳ User Service not ready via Gateway, attempt $i/5"
              sleep 5
              if [ $i -eq 5 ]; then
                echo "❌ User Service failed to respond via Gateway"
                echo "=== User Service Logs ==="
                cd transcendence && docker compose logs user-service | tail -50
                exit 1
              fi
            fi
          done

      - name: Test Game Service via Gateway
        run: |
          echo "Testing Game Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/game-service/health; then
              echo "✅ Game Service is responding via Gateway"
              break
            else
              echo "⏳ Game Service not ready via Gateway, attempt $i/5"
              sleep 5
              if [ $i -eq 5 ]; then
                echo "⚠️ Game Service not accessible via Gateway yet"
                echo "ℹ️  This may be expected if game-service routes are not fully implemented"
              fi
            fi
          done

      - name: Test Log Service via Gateway
        run: |
          echo "Testing Log Service via Gateway..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/log-service/health; then
              echo "✅ Log Service is responding via Gateway"
              break
            else
              echo "⏳ Log Service not ready via Gateway, attempt $i/5"
              sleep 5
              if [ $i -eq 5 ]; then
                echo "⚠️ Log Service not accessible via Gateway yet"
                echo "ℹ️  This may be expected if log-service routes are not fully implemented"
              fi
            fi
          done

      - name: Test inter-service communication
        run: |
          cd transcendence
          echo "Testing internal service-to-service communication..."

          # Test that gateway can reach other services internally
          echo "Testing Gateway → User Service (internal)..."
          if docker compose exec -T gateway curl -f -s http://user-service:3001/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ User Service communication works"
          else
            echo "❌ Gateway cannot reach User Service internally"
            exit 1
          fi
          
          echo "Testing Gateway → Game Service (internal)..."
          if docker compose exec -T gateway curl -f -s http://game-service:3002/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ Game Service communication works"
          else
            echo "❌ Gateway cannot reach Game Service internally"
            exit 1
          fi
          
          echo "Testing Gateway → Log Service (internal)..."
          if docker compose exec -T gateway curl -f -s http://log-service:3003/health > /dev/null 2>&1; then
            echo "✅ Gateway ↔ Log Service communication works"
          else
            echo "❌ Gateway cannot reach Log Service internally"
            exit 1
          fi

      - name: Test database volume mount
        run: |
          cd transcendence
          echo "Testing database volume..."
          
          # Check if database volume is mounted correctly
          if docker compose exec -T user-service ls -la /app/shared/ > /dev/null 2>&1; then
            echo "✅ Shared volume is accessible in user-service"
          else
            echo "❌ Shared volume not mounted in user-service"
            exit 1
          fi

      - name: Show service logs on failure
        if: failure()
        run: |
          cd transcendence
          echo "========================================================"
          echo "🚨 INTEGRATION TEST FAILURE - DETAILED DIAGNOSTICS"
          echo "========================================================"
          echo ""
          
          echo "📊 CONTAINER STATUS:"
          echo "----------------------------------------"
          docker compose ps
          echo ""
          
          echo "🌐 NETWORK INFORMATION:"
          echo "----------------------------------------"
          docker network ls | grep transcendence || echo "No transcendence networks found"
          echo ""
          
          echo "💾 VOLUME INFORMATION:"
          echo "----------------------------------------"
          docker volume ls | grep transcendence || echo "No transcendence volumes found"
          echo ""
          
          echo "🔍 HEALTH CHECK STATUS:"
          echo "----------------------------------------"
          echo "Testing Gateway health:"
          docker compose exec -T gateway curl -f -s http://localhost:3000/health 2>/dev/null || echo "❌ Gateway health check failed"
          
          echo "Testing User Service health (internal):"
          docker compose exec -T user-service wget -qO- http://localhost:3001/health 2>/dev/null || echo "❌ User Service health check failed"
          
          echo "Testing Game Service health (internal):"
          docker compose exec -T game-service wget -qO- http://localhost:3002/health 2>/dev/null || echo "❌ Game Service health check failed"
          
          echo "Testing Log Service health (internal):"
          docker compose exec -T log-service wget -qO- http://localhost:3003/health 2>/dev/null || echo "❌ Log Service health check failed"
          
          echo ""
          echo "📋 SERVICE LOGS (Last 100 lines each):"
          echo "========================================================"
          
          echo ""
          echo "🌐 GATEWAY LOGS:"
          echo "----------------------------------------"
          docker compose logs gateway | tail -100
          
          echo ""
          echo "👤 USER SERVICE LOGS:"
          echo "----------------------------------------"
          docker compose logs user-service | tail -100
          
          echo ""
          echo "🎮 GAME SERVICE LOGS:"
          echo "----------------------------------------"
          docker compose logs game-service | tail -100
          
          echo ""
          echo "📝 LOG SERVICE LOGS:"
          echo "----------------------------------------"
          docker compose logs log-service | tail -100
          
          echo ""
          echo "🏆 TOURNAMENT SERVICE LOGS:"
          echo "----------------------------------------"
          docker compose logs tournament-service | tail -50
          
          echo ""
          echo "========================================================"
          echo "🔧 TROUBLESHOOTING SUGGESTIONS:"
          echo "========================================================"
          echo "1. Gateway must be accessible at http://localhost:3000/health"
          echo "2. Services should ONLY be accessed via Gateway (no direct access)"
          echo "3. Check for application startup errors in logs above"
          echo "4. Verify inter-service DNS resolution (service-name:port)"
          echo "5. Ensure health endpoints exist and return 200 status"
          echo ""
          echo "📞 To reproduce locally:"
          echo "   cd transcendence"
          echo "   docker compose up --build"
          echo "   curl http://localhost:3000/health"
          echo "   curl http://localhost:3000/user-service/health"
          echo "========================================================"

      - name: Cleanup
        if: always()
        run: |
          cd transcendence
          docker compose down -v

  test-development-mode:
    runs-on: ubuntu-latest
    needs: validate-docker-compose
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test development docker-compose
        run: |
          cd transcendence
          
          if [ -f docker-compose.dev.yml ]; then
            echo "Testing development configuration..."
            
            # Create test .env
            cat > .env << EOF
          NODE_ENV=development
          JWT_SECRET=dev-secret
          DATABASE_URL=sqlite:/app/shared/transcendence.db
          EOF
            
            # Test development build
            docker compose -f docker-compose.yml -f docker-compose.dev.yml build
            echo "✅ Development configuration builds successfully"
          else
            echo "ℹ️ docker-compose.dev.yml not found, skipping development test"
          fi

  final-status:
    runs-on: ubuntu-latest
    needs: [validate-docker-compose, build-services, build-frontend, test-shared-resources, integration-test, test-development-mode]
    if: always()
    
    steps:
      - name: Comprehensive Pipeline Report
        if: always()
        run: |
          echo "========================================================"
          echo "🔍 DOCKER BUILD VALIDATION - COMPREHENSIVE REPORT"
          echo "========================================================"
          echo ""
          
          OVERALL_SUCCESS=true
          FAILED_JOBS=""
          
          echo "📊 JOB STATUS SUMMARY:"
          echo "----------------------------------------"
          
          if [ "${{ needs.validate-docker-compose.result }}" = "success" ]; then
            echo "✅ Docker Compose Validation: PASSED"
          else
            echo "❌ Docker Compose Validation: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS validate-docker-compose"
          fi
          
          if [ "${{ needs.build-services.result }}" = "success" ]; then
            echo "✅ Service Builds: PASSED"
          else
            echo "❌ Service Builds: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS build-services"
          fi
          
          if [ "${{ needs.build-frontend.result }}" = "success" ]; then
            echo "✅ Frontend Build: PASSED"
          else
            echo "❌ Frontend Build: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS build-frontend"
          fi
          
          if [ "${{ needs.test-shared-resources.result }}" = "success" ]; then
            echo "✅ Shared Resources Test: PASSED"
          else
            echo "❌ Shared Resources Test: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS test-shared-resources"
          fi
          
          if [ "${{ needs.integration-test.result }}" = "success" ]; then
            echo "✅ Integration Tests: PASSED"
          else
            echo "❌ Integration Tests: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS integration-test"
          fi
          
          if [ "${{ needs.test-development-mode.result }}" = "success" ]; then
            echo "✅ Development Mode Test: PASSED"
          else
            echo "❌ Development Mode Test: FAILED"
            OVERALL_SUCCESS=false
            FAILED_JOBS="$FAILED_JOBS test-development-mode"
          fi
          
          echo ""
          echo "========================================================"
          
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo "🎉 ALL TESTS PASSED!"
            echo "✅ Docker setup is working correctly"
            echo "✅ All services built successfully"
            echo "✅ Gateway routing functional"
            echo "✅ Inter-service communication works"
            echo ""
            echo "👍 Ready for deployment!"
          else
            echo "❌ PIPELINE FAILED"
            echo ""
            echo "🔧 FAILED JOBS: $FAILED_JOBS"
            echo ""
            echo "💡 KEY FIXES:"
            echo "• All services must be accessed via Gateway"
            echo "• No direct port access to internal services"
            echo "• Gateway routes: /health, /user-service/*, /game-service/*"
            echo ""
            exit 1
          fi
          
          echo "========================================================"