name: User Service API Tests

on:
  push:
    branches:
      - user-service
      - main
      # - dev-environ-node-gateway

    # No paths restriction for push - always run when pushing to these branches
  pull_request:
    branches:
      - main
    paths:
      - 'transcendence/services/user-service/**'
      - 'transcendence/shared/**'
      - '.github/workflows/user-service-tests.yml'

jobs:
  validate-structure:
    runs-on: ubuntu-latest
    name: Validate Project Structure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate service structure
        run: |
          echo "üîç Validating project structure..."
          
          # Check main directories
          for dir in transcendence/services/user-service transcendence/shared; do
            if [ -d "$dir" ]; then
              echo "‚úÖ $dir exists"
            else
              echo "‚ùå $dir missing"
              exit 1
            fi
          done
          
          # Check essential files
          essential_files=(
            "transcendence/services/user-service/package.json"
            "transcendence/services/user-service/src/index.js"
            "transcendence/services/user-service/Dockerfile"
            "transcendence/docker-compose.yml"
          )
          
          for file in "${essential_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

  syntax-check:
    runs-on: ubuntu-latest
    needs: validate-structure
    name: Syntax and Dependencies Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd transcendence/services/user-service
          echo "üì¶ Installing user-service dependencies..."
          npm install

      - name: Check syntax
        run: |
          cd transcendence/services/user-service
          echo "üîç Checking JavaScript syntax..."
          
          # Check main file
          node -c src/index.js
          echo "‚úÖ Main server file syntax OK"
          
          # Check all JS files in src
          find src -name "*.js" -exec node -c {} \;
          echo "‚úÖ All source files syntax OK"

      - name: Validate package.json
        run: |
          cd transcendence/services/user-service
          echo "üìã Validating package.json..."
          
          if jq empty package.json; then
            echo "‚úÖ package.json is valid JSON"
          else
            echo "‚ùå package.json has syntax errors"
            exit 1
          fi
          
          # Check for required scripts
          if jq -e '.scripts.start' package.json > /dev/null; then
            echo "‚úÖ Start script found"
          else
            echo "‚ö†Ô∏è No start script found"
          fi

  docker-build-test:
    runs-on: ubuntu-latest
    needs: syntax-check
    name: Docker Build Test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build user-service image
        run: |
          cd transcendence
          echo "üê≥ Building user-service Docker image..."
          docker build -t user-service-test ./services/user-service
          echo "‚úÖ Docker build successful"

      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."
          
          # Check if Node.js is available
          docker run --rm user-service-test node --version
          
          # Check if app directory exists
          docker run --rm user-service-test ls -la /app
          
          echo "‚úÖ Docker image validation passed"

  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build-test
    name: API Integration Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment
        run: |
          cd transcendence
          
          # Create test environment file
          cat > .env << EOF
          NODE_ENV=test
          DATABASE_URL=sqlite:/app/shared/database/test.db
          JWT_SECRET=test-secret-for-ci-only
          EOF
          
          echo "‚úÖ Test environment created"

      - name: Start test services
        run: |
          cd transcendence
          echo "üöÄ Starting services for testing..."
          
          # Start only essential services
          docker compose up -d database user-service gateway
          
          echo "‚è≥ Waiting for services to initialize..."
          sleep 30

      - name: Wait for services to be ready
        run: |
          cd transcendence
          echo "üîç Waiting for user-service to be ready..."
          
          # Check container status
          docker compose ps
          
          # Wait for health endpoint
          timeout=120
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            # More verbose debugging
            echo "‚è≥ Waiting... ($elapsed/$timeout seconds)"
            echo "=== Checking service logs ==="
            docker compose logs --tail=5 user-service
            echo "=== Testing connection ==="
            
            # Test health check from within Docker network
            if docker run --rm --network transcendence-network alpine/curl:latest curl -f -s http://user-service:3001/health > /tmp/health_check.json 2>/tmp/curl_error.log; then
              echo "‚úÖ User service is ready!"
              cat /tmp/health_check.json
              break
            else
              echo "‚ùå Health check failed. Curl error:"
              cat /tmp/curl_error.log 2>/dev/null || echo "No curl error log"
              
              # Also try from user-service container itself
              echo "=== Testing from within user-service container ==="
              if docker compose exec -T user-service wget -q --spider http://127.0.0.1:3001/health; then
                echo "‚úÖ Service is responding on 127.0.0.1 within container"
              else
                echo "‚ùå Service not responding even within its own container"
              fi
              
              sleep 5
              elapsed=$((elapsed + 5))
            fi
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Service failed to start within $timeout seconds"
            echo "=== Final debugging information ==="
            echo "=== Container status ==="
            docker compose ps
            echo "=== Container logs (last 50 lines) ==="
            docker compose logs --tail=50 user-service
            echo "=== Network information ==="
            docker network ls
            echo "=== Checking if port is open ==="
            docker compose exec user-service netstat -tlnp 2>/dev/null || echo "netstat not available"
            exit 1
          fi

      - name: Run API tests
        run: |
          echo "üß™ Running API integration tests..."
          
          # BASE_URL="http://localhost:3001"
          BASE_URL="http://localhost:3000/user-service"
          
          # Test 1: Health Check
          echo "1. Testing health endpoint..."
          if curl -f -s "$BASE_URL/health"; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Test 2: User Registration
          echo "2. Testing user registration..."
          UNIQUE_ID=$(date +%s)
          REGISTER_DATA="{
            \"username\": \"testuser$UNIQUE_ID\",
            \"email\": \"test$UNIQUE_ID@example.com\",
            \"password\": \"TestPassword123\"
          }"
          
          REGISTER_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/register.json \
            -X POST "$BASE_URL/auth/register" \
            -H "Content-Type: application/json" \
            -d "$REGISTER_DATA")
          
          if [ "$REGISTER_RESPONSE" = "201" ] ; then
            echo "‚úÖ User registration successful status: $REGISTER_RESPONSE"
            cat /tmp/register.json | jq .
          else
            echo "‚ùå User registration failed with status: $REGISTER_RESPONSE"
            cat /tmp/register.json
            exit 1
          fi
          
          # Extract token for further tests
          TOKEN=$(cat /tmp/register.json | jq -r '.token // empty')
          
          # Test 3: User Login
          echo "3. Testing user login..."
          LOGIN_DATA="{
            \"email\": \"test$UNIQUE_ID@example.com\",
            \"password\": \"TestPassword123\"
          }"
          
          LOGIN_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/login.json \
            -X POST "$BASE_URL/auth/login" \
            -H "Content-Type: application/json" \
            -d "$LOGIN_DATA")
          
          if [ "$LOGIN_RESPONSE" = "200" ]; then
            echo "‚úÖ User login successful"
            cat /tmp/login.json | jq .
          else
            echo "‚ùå User login failed with status: $LOGIN_RESPONSE"
            cat /tmp/login.json
            exit 1
          fi
          
          # Test 4: Protected endpoint (if token available)
          if [ ! -z "$TOKEN" ]; then
            echo "4. Testing protected profile endpoint..."
            PROFILE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/profile.json \
              -X GET "$BASE_URL/auth/profile" \
              -H "Authorization: Bearer $TOKEN")
            
            if [ "$PROFILE_RESPONSE" = "200" ]; then
              echo "‚úÖ Profile access successful"
              cat /tmp/profile.json | jq .
            else
              echo "‚ö†Ô∏è Profile access failed with status: $PROFILE_RESPONSE"
              cat /tmp/profile.json
            fi
          fi
          
          echo "üéâ All API tests completed successfully!"

      - name: Test error handling
        run: |
          echo "üß™ Testing API error handling..."
          
          BASE_URL="http://localhost:3000/user-service"
          
          # Test invalid registration
          echo "Testing invalid registration data..."
          INVALID_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/invalid.json \
            -X POST "$BASE_URL/auth/register" \
            -H "Content-Type: application/json" \
            -d '{"username": "test"}')
          
          if [ "$INVALID_RESPONSE" = "400" ]; then
            echo "‚úÖ Invalid data properly rejected"
          else
            echo "‚ö†Ô∏è Expected 400 but got: $INVALID_RESPONSE"
          fi
          
          # Test invalid login
          echo "Testing invalid login credentials..."
          INVALID_LOGIN=$(curl -s -w "%{http_code}" -o /tmp/invalid_login.json \
            -X POST "$BASE_URL/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"email": "nonexistent@example.com", "password": "wrong"}')
          
          if [ "$INVALID_LOGIN" = "401" ]; then
            echo "‚úÖ Invalid credentials properly rejected"
          else
            echo "‚ö†Ô∏è Expected 401 but got: $INVALID_LOGIN"
          fi
          
          # Test protected endpoint without token
          echo "Testing protected endpoint without authentication..."
          NO_AUTH_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/no_auth.json \
            -X GET "$BASE_URL/auth/profile")
          
          if [ "$NO_AUTH_RESPONSE" = "401" ]; then
            echo "‚úÖ Unauthorized access properly blocked"
          else
            echo "‚ö†Ô∏è Expected 401 but got: $NO_AUTH_RESPONSE"
          fi
          
          echo "‚úÖ Error handling tests completed!"

      - name: Show service logs on failure
        if: failure()
        run: |
          cd transcendence
          echo "=== Service Logs for Debugging ==="
          docker compose logs user-service | tail -100
          
          echo "=== Container Status ==="
          docker compose ps

      - name: Cleanup
        if: always()
        run: |
          cd transcendence
          echo "üßπ Cleaning up test environment..."
          docker compose down -v
          docker system prune -f

  security-scan:
    runs-on: ubuntu-latest
    needs: syntax-check
    name: Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd transcendence/services/user-service
          npm install

      - name: Run security audit
        run: |
          cd transcendence/services/user-service
          echo "üîí Running security audit..."
          
          # Run npm audit
          npm audit --audit-level=moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found"
            npm audit --audit-level=moderate --json > /tmp/audit.json
            cat /tmp/audit.json | jq '.vulnerabilities'
          }

      - name: Check for secrets
        run: |
          echo "üîç Scanning for potential secrets..."
          
          # Basic secret detection
          if grep -r -i "password.*=" transcendence/services/user-service/src/ | grep -v -E "(bcrypt|hash|validate)" | grep -v test; then
            echo "‚ö†Ô∏è Potential hardcoded passwords found"
          else
            echo "‚úÖ No hardcoded passwords detected"
          fi

  final-status:
    runs-on: ubuntu-latest
    needs: [validate-structure, syntax-check, docker-build-test, integration-test, security-scan]
    if: always()
    name: Final Status Report
    
    steps:
      - name: Report results
        run: |
          echo "=== API Testing Pipeline Results ==="
          
          if [ "${{ needs.validate-structure.result }}" = "success" ]; then
            echo "‚úÖ Structure validation passed"
          else
            echo "‚ùå Structure validation failed"
          fi
          
          if [ "${{ needs.syntax-check.result }}" = "success" ]; then
            echo "‚úÖ Syntax check passed"
          else
            echo "‚ùå Syntax check failed"
          fi
          
          if [ "${{ needs.docker-build-test.result }}" = "success" ]; then
            echo "‚úÖ Docker build test passed"
          else
            echo "‚ùå Docker build test failed"
          fi
          
          if [ "${{ needs.integration-test.result }}" = "success" ]; then
            echo "‚úÖ Integration tests passed"
          else
            echo "‚ùå Integration tests failed"
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "‚úÖ Security scan passed"
          else
            echo "‚ùå Security scan failed"
          fi
          
          # Determine overall success
          if [ "${{ needs.validate-structure.result }}" != "success" ] || \
             [ "${{ needs.syntax-check.result }}" != "success" ] || \
             [ "${{ needs.integration-test.result }}" != "success" ]; then
            echo "‚ùå Critical tests failed"
            exit 1
          fi
          
          echo "üéâ All critical tests passed!"